tomcat:
  # 'no' means that the installation package will be copied from the Ansible controller machine
  # 'yes' means that the package is already on the appsever or that the download wil be executed from the appserver
  remote: yes
  version: apache-tomcat-7.0.78
  home: /opt/tomcat
  java_vm_ms: 1024M
  java_vm_mx: 1024M
  # If remote is 'no' then location will be the location on the Ansible controller machine
  # of the file to be copied to the appserver
  package_location: "{{ tomcat_pkg_url }}"
  #package_location: /vagrant_share/tmp/apache-tomcat-7.0.77.tar.gz
  admin_username: admin
  admin_password: admin

geonetwork:
  redeploy: no
  # 'no' means that the installation package will be copied from the Ansible controller machine
  # 'yes' means that the .war is already on the appsever or that the download wil be executed from the appserver
  remote: yes
  # If remote is 'no' then location will be the location on the Ansible controller machine
  # of the file to be copied to the appserver
  package_location: "{{ geonetwork_pkg_url }}"
  #package_location: /tmp/geonetwork.war
  home: /geohome
  data_dir: "geohome/data"
  tomcat_dir: "{{ tomcat['home'] }}/webapps/geonetwork"
  log:
    file: /geohome/geonetwork.log
  db:
    name: mysql
    username: defaultuser
    password: default1
    host: "{{ (deployment_type == "local") | ternary('10.0.0.22', db_endpoint) }}"
    # current version of geonetwork ignores this - port hard coded
    port: 3306
    database: geonetworkdb
    # name: h2
    # username: defaultuser
    # password: default1
    # host: localhost
    # port: 5432
    # database: /geohome/geonetworkdb
  solr:
    # Should match the information on group_vars/solrservers
    url: "{{ 'http://10.0.0.22:8983' if deployment_type == "local" else 'http://' + hostvars[groups['tag_Name_solrserver'][0]]['ec2_private_dns_name'] + ':8983'"
    collection: collection1
